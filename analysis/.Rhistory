# by_species_df$samp_len <- str_count(by_species_df$sample)
# unique(by_species_df$samp_len)
# ok lets try to summarize by summing all reads within a taxon and a site/sample.
by_species_df <- ASV_tax %>%
group_by(sample, species) %>% # group the columns you want to "leave alone"
summarize(nReads=sum(nReads)) %>% #sum nReads
separate(col=sample, into=c('sample','tech'), sep='[.]') %>%
separate(col=sample, into=c("sample", "bio"), sep = 9)
by_site_species <- by_species_df %>%
group_by(sample, species) %>%
summarize(nReads=sum(nReads)) #sum nReads by species+sample - is this correct??
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
ostrea <- by_site_species %>%
filter(species %in% c('Ostrea lurida'))
# log transform to make data exploration easier?
ostrea$nReads <- log(ostrea$nReads)
littorina <- by_site_species %>%
filter(species %in% c('Littorina plena'))
#lets see if we can match oyster data up with environmental data
#------------------------------------------------------------------------------
events$event <- str_remove(events$event, "[-]") # find a better way to do this please
events$event <- str_remove(events$event, "[-]")
events <- events %>%
separate(col=event, into=c("sample", "foo"), sep = 9)
# join environmental/oceanographic variables with nReads of ostrea
ostrea_env <- inner_join(ostrea, events)
# lets try some scatter plots log(nReads) vs environmental variables
plot(ostrea_env$Temperature, ostrea_env$nReads)
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads)
dev.off()
?plot
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, xlab="pH",ylab="nReads over all replicates")
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, xlab="pH",ylab="nReads over all replicates")
dev.off()
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, main="Olympia Oyster Reads vs. pH" xlab="pH",ylab="nReads over all replicates")
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, main="Olympia Oyster Reads vs. pH" xlab="pH",ylab="nReads over all replicates")
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, main="Olympia Oyster Reads vs. pH", xlab="pH",ylab="nReads over all replicates")
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, main="Olympia Oyster Reads vs. pH", xlab="pH",ylab="nReads over all replicates")
dev.off()
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, main="log(Olympia Oyster Reads) vs. pH", xlab="pH",ylab="nReads over all replicates")
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, main="log(Olympia Oyster Reads) vs. pH", xlab="pH",ylab="nReads over all replicates")
dev.off()
jpeg("./figures/ostrea_pH.jpg", width = 500, height = 500)
plot(ostrea_env$pH_new, ostrea_env$nReads, main="log(Olympia Oyster Reads) vs. pH", xlab="pH",ylab="nReads over all replicates")
.libPaths()
knitr::opts_chunk$set(echo = TRUE)
library('dada2')
library(dada2); packageVersion("dada2")
library('here')
library('dplyr')
library('stringr')
library('tidyverse')
# load my species tables
by_site_species <- read.csv(here('all.the.useful.tables','by.site.species.csv'))
events <- read.csv(here('all.the.useful.tables', 'events.joe.format.csv'))
by_site_species$diversity <- 1
# how many species at each sampling event
species_div <- by_site_species %>%
group_by(sample, diversity) %>%
summarize(diversity=sum(diversity)) #sum dummy to get species diversity
# join with oceanographic data
species_div_env <- inner_join(species_div, events)
# species diversity vs pH new pH?
jpeg("./figures/pH.richness.jpg", width = 500, height = 500)
plot(species_div_env$pH_new, species_div_env$diversity, xlim=c(7.5,8.7),
main = 'Species Richness vs pH',
xlab = 'pH',
ylab = 'species richness')
dev.off()
div_by_site <- function(location){
samp_div <- species_div_env %>%
filter(str_detect(sample, location))
barplot(samp_div$diversity, names.arg = samp_div$sample, las=2)
}
# lets use that function!
div_by_site("FH")
div_by_site("LL")
div_by_site("LK")
div_by_site("SA")
div_by_site("CP")
div_by_site <- function(location){
samp_div <- species_div_env %>%
filter(str_detect(sample, location))
barplot(samp_div$diversity, names.arg = samp_div$sample, las=2,
main = location,
xlab = 'event',
ylab = 'species richness')
}
# lets use that function!
div_by_site("FH")
div_by_site("LL")
div_by_site("LK")
div_by_site("SA")
div_by_site("CP")
div_by_site("PO")
barplot(samp_div$diversity, names.arg = samp_div$sample, las=2,
main = location,
ylab = 'species richness')
div_by_site <- function(location){
samp_div <- species_div_env %>%
filter(str_detect(sample, location))
barplot(samp_div$diversity, names.arg = samp_div$sample, las=2,
main = location,
ylab = 'species richness')
}
# lets use that function!
div_by_site("FH")
div_by_site("LL")
div_by_site("LK")
div_by_site("SA")
div_by_site("CP")
div_by_site("PO")
div_by_site("TR")
div_by_site("TW")
# lets use that function!
div_by_site("FH")
div_by_site("LL")
div_by_site("LK")
div_by_site("SA")
div_by_site("CP")
div_by_site("PO")
div_by_site("TR")
div_by_site("TW")
source('~/Documents/GitHub/joe-benthos/analysis/04-species-abundance.R')
library('here')
library('dplyr')
library('stringr')
library('tidyverse')
# load my species tables
by_site_species <- read.csv(here('all.the.useful.tables','by.site.species.csv'))
events <- read.csv(here('all.the.useful.tables', 'events.joe.format.csv'))
by_site_species$diversity <- 1
# how many species at each sampling event
species_div <- by_site_species %>%
group_by(sample, diversity) %>%
summarize(diversity=sum(diversity)) #sum dummy to get species diversity
# join with oceanographic data
species_div_env <- inner_join(species_div, events)
# species diversity vs pH new pH?
jpeg("./figures/pH.richness.jpg", width = 500, height = 500)
plot(species_div_env$pH_new, species_div_env$diversity, xlim=c(7.5,8.7),
main = 'Species Richness vs pH',
xlab = 'pH',
ylab = 'species richness')
dev.off()
div_by_site <- function(location){
samp_div <- species_div_env %>%
filter(str_detect(sample, location))
barplot(samp_div$diversity, names.arg = samp_div$sample, las=2,
main = location,
ylab = 'species richness')
}
# lets use that function!
div_by_site("FH")
div_by_site("LL")
div_by_site("LK")
div_by_site("SA")
div_by_site("CP")
div_by_site("PO")
div_by_site("TR")
div_by_site("TW")
# more scatter plots, salinity, temperature
jpeg("./figures/salinity.richness.jpg", width = 500, height = 500)
plot(species_div_env$Salinity, species_div_env$diversity,
main = 'Species Richness vs Salinity',
xlab = 'salinity',
ylab = 'species richness')
dev.off()
jpeg("./figures/salinity.temp.jpg", width = 500, height = 500)
plot(species_div_env$Temperature, species_div_env$diversity,
main = 'Species Richness vs Temperature',
xlab = 'temperature C',
ylab = 'species richness')
dev.off()
write_csv(species_div, "./all.the.useful.tables/joe.species.div.csv")
write_csv(species_div_env, "./all.the.useful.tables/joe.species.div.env.csv")
# lets use that function!
jpeg("./figures/FH.series.jpg", width = 500, height = 500)
div_by_site("FH")
dev.off()
jpeg("./figures/LL.series.jpg", width = 500, height = 500)
div_by_site("LL")
dev.off()
jpeg("./figures/LK.series.jpg", width = 500, height = 500)
div_by_site("LK")
dev.off()
jpeg("./figures/SA.series.jpg", width = 500, height = 500)
div_by_site("SA")
dev.off()
jpeg("./figures/CP.series.jpg", width = 500, height = 500)
div_by_site("CP")
dev.off()
jpeg("./figures/PO.series.jpg", width = 500, height = 500)
div_by_site("PO")
dev.off()
jpeg("./figures/TR.series.jpg", width = 500, height = 500)
div_by_site("TR")
dev.off()
jpeg("./figures/TW.series.jpg", width = 500, height = 500)
div_by_site("TW")
dev.off()
barplot(samp_div$diversity, names.arg = samp_div$sample, las=2,
main = location,
ylab = 'species richness',
ylim = c(0,100))
div_by_site <- function(location){
samp_div <- species_div_env %>%
filter(str_detect(sample, location))
barplot(samp_div$diversity, names.arg = samp_div$sample, las=2,
main = location,
ylab = 'species richness',
ylim = c(0,100))
}
# lets use that function!
jpeg("./figures/FH.series.jpg", width = 500, height = 500)
div_by_site("FH")
dev.off()
jpeg("./figures/LL.series.jpg", width = 500, height = 500)
div_by_site("LL")
dev.off()
jpeg("./figures/LK.series.jpg", width = 500, height = 500)
div_by_site("LK")
dev.off()
jpeg("./figures/SA.series.jpg", width = 500, height = 500)
div_by_site("SA")
dev.off()
jpeg("./figures/CP.series.jpg", width = 500, height = 500)
div_by_site("CP")
dev.off()
jpeg("./figures/PO.series.jpg", width = 500, height = 500)
div_by_site("PO")
dev.off()
jpeg("./figures/TR.series.jpg", width = 500, height = 500)
div_by_site("TR")
dev.off()
jpeg("./figures/TW.series.jpg", width = 500, height = 500)
div_by_site("TW")
dev.off()
install.packages('insect')
library(insect)
download.file("https://www.dropbox.com/s/dvnrhnfmo727774/classifier.rds?dl=1",
destfile = "classifier.rds", mode = "wb")
## read in the example seqtab.nochim ASV table
data(samoa)
force(samoa)
foo <- as.data.frame(samoa)
View(foo)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
library(here)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
View(ASV_tab)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
library(here)
download.file("https://www.dropbox.com/s/dvnrhnfmo727774/classifier.rds?dl=1",
destfile = "classifier.rds", mode = "wb")
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
foo <- as.data.frame(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
foo <- as.data.frame(samoa)
library(tidyverse)
seq_tab <- inner_join(ASV_tab, hash_key)
View(seq_tab)
select(seq_tab, -c(Hash))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab <- pivot_longer(seq_tab)
?pivot_wider
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab <- pivot_wider(seq_tab, id_cols = Sequence)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
library(reshape2)
dcast(seq_tab, sample ~ Sequence)
seq_tab <- dcast(seq_tab, sample ~ Sequence)
?dcast
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab <- dcast(seq_tab, sample ~ nReads)
seq_tab <- dcast(seq_tab, sample ~ Sequence, sum())
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
wide = seq_tab %>%
spread(Sequence)
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
wide = seq_tab %>%
spread(Sequence)
wide = seq_tab %>%
spread(Sequence, nReads)
View(wide)
View(foo)
seq_tab = seq_tab %>%
spread(Sequence, nReads)
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab = seq_tab %>%
spread(Sequence, nReads)
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
seq_tab[is.na(seq_tab)] <- 0
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
seq_tab <- seq_tab[is.na(seq_tab)] <- 0
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
seq_tab[is.na(seq_tab)] <- 0
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
seq_tab[is.na(seq_tab)] <- 0
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
is.na(seq_tab) <- 0
?replace_na()
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace_na(0)
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0)
## get sequences from table column names
x <- char2dna(colnames(seq_tab))
## name the sequences sequentially
names(x) <- paste0("ASV", seq_along(x))
## optionally remove column names that can flood the console when printed
colnames(seq_tab) <- NULL
classifier <- readRDS("classifier.rds")
classifier
names(attributes(classifier))
longDF <- classify(x, classifier, threshold = 0.8)
View(longDF)
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0)
## get sequences from table column names
x <- char2dna(colnames(seq_tab))
## name the sequences sequentially
names(x) <- paste0("ASV", seq_along(x))
classifier <- readRDS("classifier.rds")
classifier
names(attributes(classifier))
longDF <- classify(x, classifier, threshold = 0.8)
longDF <- cbind(longDF, t(seq_tab))
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
write_csv(longDF, './all.the.useful.table/01subset.taxa.table.csv')
write_csv(longDF, './all.the.useful.tables/01subset.taxa.table.csv')
taxa <- aggregate(longDF[3:12], longDF["taxID"], head, 1)
counts <- aggregate(longDF[13:ncol(longDF)], longDF["taxID"], sum)
shortDF <- merge(taxa, counts, by = "taxID")
taxa <- aggregate(longDF[3:12], longDF["taxID"], head, 1)
counts <- aggregate(longDF[13:ncol(longDF)], longDF["taxID"], sum)
?render
View(longDF)
View(seq_tab)
# see what example data looks like
samoa_df <- as.data.frame(samoa)
View(samoa)
View(samoa_df)
## read in the example seqtab.nochim ASV table
data(samoa)
# see what example data looks like
samoa_df <- as.data.frame(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0) %>%
row.names() <- seq_tab$sample
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0) %>%
row.names(seq_tab) <- seq_tab$sample
## get sequences from table column names
x <- char2dna(colnames(seq_tab))
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0) %>%
seq_tab <- seq_tab(seq_tab[,-1], row.names = seq_tab[,1])
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0) %>%
seq_tab <- data.frame(seq_tab[,-1], row.names = seq_tab[,1])
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
# see what example data looks like
samoa_df <- as.data.frame(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0) %>%
seq_tab <- data.frame(seq_tab[,-1], row.names = seq_tab[,1])
library(insect)
library(here)
library(tidyverse)
library(reshape2)
## read in the example seqtab.nochim ASV table
data(samoa)
# see what example data looks like
samoa_df <- as.data.frame(samoa)
ASV_tab <- read.csv(here('./01-demultiplexed','ASV_table.csv'))
hash_key <- read.csv(here('./01-demultiplexed','hash_key.csv'))
seq_tab <- inner_join(ASV_tab, hash_key)
seq_tab <- select(seq_tab, -c(Hash))
seq_tab = seq_tab %>%
spread(Sequence, nReads) %>%
replace(is.na(.), 0)
seq_tab <- data.frame(seq_tab[,-1], row.names = seq_tab[,1])
## get sequences from table column names
x <- char2dna(colnames(seq_tab))
## name the sequences sequentially
names(x) <- paste0("ASV", seq_along(x))
classifier <- readRDS("classifier.rds")
classifier
names(attributes(classifier))
longDF <- classify(x, classifier, threshold = 0.8)
longDF <- cbind(longDF, t(seq_tab))
write_csv(longDF, './all.the.useful.tables/01subset.taxa.table.csv')
# load Rarmon's data
ASV_table <- read.csv(here('asv-output','ASV_table_all_together.csv'))
library('here')
library('dplyr')
library('stringr')
library('tidyverse')
# load Rarmon's data
ASV_table <- read.csv(here('all.the.useful.tables','ASV_table_all_together.csv'))
taxonomy_table <- read.csv(here('all.the.useful.tables','all.taxonomy.20190130.csv'))
View(ASV_table)
