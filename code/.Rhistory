packages.install(dada2)
install.packages(dada2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.11")
library(dada2); packageVersion("dada2")
path <- '../data' # CHANGE ME to the directory containing the fastq files after unzipping.
print(path)
list.files(path)
knitr::opts_chunk$set(echo = TRUE)
path <- "../data/demultiplexed" # directory containing fast qs
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="Rev", full.names = TRUE))
print(fnFs)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="Rev", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="Fwd", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
print(sample.names)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="Rev", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="Fwd", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_[RF]"), `[`, 1)
print(sample.names)
plotQualityProfile(fnFs[1:2])
library(dada2); packageVersion("dada2")
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
print(fnRs)
knitr::opts_chunk$set(echo = TRUE)
library(dada2); packageVersion("dada2")
path <- "../data/demultiplexed" # directory containing fast qs
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="Fwd", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="Rev", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_[RF]"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
errF <- learnErrors(fnFs, multithread=TRUE)
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
filtRs
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(220,220),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtRs
sample.names
ffnRs
fnRs
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="Fwd", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="Rev", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs)), `[`, 1)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="Fwd", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="Rev", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply((basename(fnFs)), `[`, 1)
sample.names
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(220,220),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
library('here')
library('dplyr')
library('stringr')
library('tidyverse')
library('here')
library('dplyr')
library('stringr')
library('tidyverse')
# load my species tables
by_site_species <- read.csv(here('asv-output','by.site.species.csv'))
